// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ST.WinIot.App.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Piece
    {
        /// <summary>
        /// Initializes a new instance of the Piece class.
        /// </summary>
        public Piece() { }

        /// <summary>
        /// Initializes a new instance of the Piece class.
        /// </summary>
        public Piece(string homeId, string name, int type, int floor, string pieceId = default(string), Home home = default(Home), string userId = default(string))
        {
            PieceId = pieceId;
            HomeId = homeId;
            Home = home;
            UserId = userId;
            Name = name;
            Type = type;
            Floor = floor;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pieceId")]
        public string PieceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeId")]
        public string HomeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "home")]
        public Home Home { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public int Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "floor")]
        public int Floor { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (HomeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HomeId");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.Home != null)
            {
                this.Home.Validate();
            }
            if (this.Name != null)
            {
                if (this.Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
        }
    }
}
