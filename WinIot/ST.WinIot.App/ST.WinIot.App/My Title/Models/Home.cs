// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ST.WinIot.App.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Home
    {
        /// <summary>
        /// Initializes a new instance of the Home class.
        /// </summary>
        public Home() { }

        /// <summary>
        /// Initializes a new instance of the Home class.
        /// </summary>
        public Home(string name, string fullAddress, string city, string state, string country, string homeId = default(string), string userId = default(string))
        {
            HomeId = homeId;
            UserId = userId;
            Name = name;
            FullAddress = fullAddress;
            City = city;
            State = state;
            Country = country;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeId")]
        public string HomeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fullAddress")]
        public string FullAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (FullAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FullAddress");
            }
            if (City == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "City");
            }
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
            if (Country == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Country");
            }
            if (this.Name != null)
            {
                if (this.Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (this.FullAddress != null)
            {
                if (this.FullAddress.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FullAddress", 1);
                }
            }
            if (this.City != null)
            {
                if (this.City.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "City", 1);
                }
            }
            if (this.State != null)
            {
                if (this.State.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "State", 1);
                }
            }
            if (this.Country != null)
            {
                if (this.Country.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Country", 1);
                }
            }
        }
    }
}
