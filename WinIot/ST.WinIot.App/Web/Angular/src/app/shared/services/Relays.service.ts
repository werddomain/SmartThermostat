

//*************************DO NOT MODIFY**************************
//
//THESE FILES ARE AUTOGENERATED WITH TYPEWRITER AND ANY MODIFICATIONS MADE HERE WILL BE LOST
//PLEASE VISIT http://frhagn.github.io/Typewriter/ TO LEARN MORE ABOUT THIS VISUAL STUDIO EXTENSION
//
//*************************DO NOT MODIFY**************************
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http'; 
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
//ST.Web.API
import { Relay } from '../classes/Relay';
import { GlobalService } from "../../global.service";
//Remote Call
@Injectable()
export class RelaysService {
    constructor(private _httpClient: HttpClient, private global: GlobalService) { }        
    
    // get: Manage/Relays      
    getRelays(): Observable<Relay[]> {
        var _Url = this.global.ApiConfig.apiServer + `/Manage/Relays`;
            return this._httpClient.get<Relay[]>(_Url)
                .catch(this.handleError);
    }
    
    // get: Manage/Relays/${encodeURIComponent(id)}      
    getRelay(id: string): Observable<Relay> {
        var _Url = this.global.ApiConfig.apiServer + `/Manage/Relays/${encodeURIComponent(id)}`;
            return this._httpClient.get<Relay>(_Url)
                .catch(this.handleError);
    }
    
    // put: Manage/Relays/${encodeURIComponent(id)}      
    putRelay(id: string, relay: Relay): Observable<void> {
        var _Url = this.global.ApiConfig.apiServer + `/Manage/Relays/${encodeURIComponent(id)}`;
            return this._httpClient.put<void>(_Url, relay)
                .catch(this.handleError);
    }
    
    // post: Manage/Relays      
    postRelay(relay: Relay): Observable<Relay> {
        var _Url = this.global.ApiConfig.apiServer + `/Manage/Relays`;
            return this._httpClient.post<Relay>(_Url, relay)
                .catch(this.handleError);
    }
    
    // delete: Manage/Relays/${encodeURIComponent(id)}      
    deleteRelay(id: string): Observable<Relay> {
        var _Url = this.global.ApiConfig.apiServer + `/Manage/Relays/${encodeURIComponent(id)}`;
            return this._httpClient.delete<Relay>(_Url)
                .catch(this.handleError);
    }
    
    // Utility
    private handleError(error: HttpErrorResponse) {
        console.error(error);
        let customError: string = "";
        if (error.error) {
            customError = error.status === 400 ? error.error : error.statusText
        }
        return Observable.throw(customError || 'Server error');
    }
}
